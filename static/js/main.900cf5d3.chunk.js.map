{"version":3,"sources":["component/card/card.jsx","component/card-list/card-list.jsx","component/searchBox/searchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","Cardlist","monsters","map","x","SearchBox","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","console","log","state","fetch","then","response","json","users","searchedVal","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAceA,MAXf,SAAcC,GACV,OACA,sBAAKC,UAAU,iBAAf,UAEI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,KAChF,6BAAML,EAAMG,QAAQG,OACpB,4BAAIN,EAAMG,QAAQI,YCUXC,MAff,SAAkBR,GAId,OAAO,qBAAKC,UAAU,YAAf,SAKHD,EAAMS,SAASC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAiBR,QAASQ,EAA1B,cAAWA,EAAEP,U,MCA9BQ,MAVf,SAAmBZ,GACf,OACI,uBAAOa,KAAK,SACZZ,UAAU,SACVa,YAAad,EAAMc,YACnBC,SAAUf,EAAMgB,gBC0CTC,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAcFD,aAAe,SAACE,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,QAAS,kBAC7CC,QAAQC,IAAI,EAAKC,WAdnB,EAAKA,MAAQ,CACXhB,SAAU,GACVW,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBM,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKX,SAAS,CAAEV,SAAUqB,S,oBAS/C,WACE,IAAMC,EAAcC,KAAKP,MAAML,YAGzBa,EAFWD,KAAKP,MAAMhB,SAEMyB,QAAO,SAAC/B,GAAD,OACvCA,EAAQG,KAAK6B,cAAcC,SAASL,EAAYI,kBAGlD,OACE,sBAAKlC,UAAU,MAAf,UACE,oBAAIA,UAAU,UAAd,8BAEA,cAAC,EAAD,CACEa,YAAY,kBACZE,aAAcgB,KAAKhB,eAGrB,cAAC,EAAD,CAAUP,SAAUwB,W,GAvCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.900cf5d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./card.css\";\r\n\r\nfunction Card(props){\r\n    return (\r\n    <div className=\"card-container\">\r\n        {/* here props.key is not working. IDK */}\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"\" />\r\n        <h1 >{props.monster.name}</h1>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport './cardList.css';\r\nimport Card from '../card/card';\r\n\r\nfunction Cardlist(props){\r\n    // console.log(props.children);\r\n    //Cardlist component is called only once but to print each child component or each h1 we use prop.children. and grid class is applied only to the div containing all the childrens\r\n    //to print each of the child we use prop.children\r\n    return <div className=\"card-list\">\r\n        {\r\n        //arrow function with x as argument which accesses individual array elements.\r\n        //key is used to uniquely identify html elements\r\n        //array of h1's\r\n        props.monsters.map(x => <Card key={x.id} monster={x}> </Card>)\r\n        \r\n        }\r\n    </div>;\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\nimport './searchBoxStyle.css';\r\n\r\nfunction SearchBox(props){\r\n    return (\r\n        <input type=\"search\" \r\n        className=\"search\"\r\n        placeholder={props.placeholder}\r\n        onChange={props.handleChange}>\r\n        </input>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport CardList from \"./component/card-list/card-list\";\nimport SearchBox from \"./component/searchBox/searchBox\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n  //witout using arrow function in definintion we have to use bind in constructor for this function (handleChange)\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value }, () =>\n      console.log(this.state)\n    );\n  };\n\n  render() {\n    const searchedVal = this.state.searchField;\n    const monsters = this.state.monsters;\n\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchedVal.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1 className='heading'>Monsters Rolodex</h1>\n\n        <SearchBox\n          placeholder=\"Search Monsters\"\n          handleChange={this.handleChange}\n        ></SearchBox>\n\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// setstate has a callback function which gets called after the state has been set. setstate is an asynchronous function. so when we want to print state after setting it may happen that we will get previous state because the event has not occured yet and it is running next lines of code as generally occurs in asynchronous functions.\n\n//if we do not import {Component} from react in the above statement then we have to wrie React.Component below\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}